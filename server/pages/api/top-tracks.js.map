{"version":3,"file":"pages/api/top-tracks.js","mappings":"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","sources":["webpack://_N_E/?8b30","webpack://_N_E/./lib/spotify.ts","webpack://_N_E/./pages/api/top-tracks.ts","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/error.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/utils.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/spec-extension/fetch-event.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/i18n/detect-domain-locale.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/remove-trailing-slash.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/parse-path.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/add-path-prefix.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/add-path-suffix.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/path-has-prefix.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/add-locale.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/format-next-pathname-info.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/get-hostname.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/i18n/normalize-locale-path.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/remove-path-prefix.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/get-next-pathname-info.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/next-url.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/spec-extension/cookies/serialize.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/spec-extension/cookies/request-cookies.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/spec-extension/cookies/response-cookies.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/spec-extension/cookies/index.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/spec-extension/request.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/spec-extension/response.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/relativize-url.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/internal-utils.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/app-paths.js","webpack://_N_E/./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/adapter.js","webpack://_N_E/<anon>"],"sourcesContent":["\n        import { adapter, enhanceGlobals } from 'next/dist/esm/server/web/adapter'\n\n        enhanceGlobals()\n\n        var mod = require(\"private-next-pages/api/top-tracks.ts\")\n        var handler = mod.middleware || mod.default;\n\n        if (typeof handler !== 'function') {\n          throw new Error('The Edge Function \"pages/api/top-tracks\" must export a `default` function');\n        }\n\n        export default function (opts) {\n          return adapter({\n              ...opts,\n              page: \"/api/top-tracks\",\n              handler,\n          })\n        }\n    ","const client_id = process.env.SPOTIFY_CLIENT_ID;\nconst client_secret = process.env.SPOTIFY_CLIENT_SECRET;\nconst refresh_token = process.env.SPOTIFY_REFRESH_TOKEN;\n\nconst basic = btoa(`${client_id}:${client_secret}`);\nconst NOW_PLAYING_ENDPOINT = `https://api.spotify.com/v1/me/player/currently-playing`;\nconst TOP_TRACKS_ENDPOINT = `https://api.spotify.com/v1/me/top/tracks`;\nconst TOKEN_ENDPOINT = `https://accounts.spotify.com/api/token`;\n\nconst getAccessToken = async () => {\n  const response = await fetch(TOKEN_ENDPOINT, {\n    method: 'POST',\n    headers: {\n      Authorization: `Basic ${basic}`,\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: new URLSearchParams({\n      grant_type: 'refresh_token',\n      refresh_token\n    })\n  });\n\n  return response.json();\n};\n\nexport const getNowPlaying = async () => {\n  const { access_token } = await getAccessToken();\n\n  return fetch(NOW_PLAYING_ENDPOINT, {\n    headers: {\n      Authorization: `Bearer ${access_token}`\n    }\n  });\n};\n\nexport const getTopTracks = async () => {\n  const { access_token } = await getAccessToken();\n\n  return fetch(TOP_TRACKS_ENDPOINT, {\n    headers: {\n      Authorization: `Bearer ${access_token}`\n    }\n  });\n};\n","import { type NextRequest } from 'next/server';\nimport { getTopTracks } from 'lib/spotify';\n\nexport const config = {\n  runtime: 'experimental-edge'\n};\n\nexport default async function handler(req: NextRequest) {\n  const response = await getTopTracks();\n  const { items } = await response.json();\n\n  const tracks = items.slice(0, 10).map((track) => ({\n    artist: track.artists.map((_artist) => _artist.name).join(', '),\n    songUrl: track.external_urls.spotify,\n    title: track.name\n  }));\n\n  return new Response(JSON.stringify({ tracks }), {\n    status: 200,\n    headers: {\n      'content-type': 'application/json',\n      'cache-control': 'public, s-maxage=86400, stale-while-revalidate=43200'\n    }\n  });\n}\n","export class PageSignatureError extends Error {\n    constructor({ page  }){\n        super(`The middleware \"${page}\" accepts an async API directly with the form:\n  \n  export function middleware(request, event) {\n    return NextResponse.redirect('/new-location')\n  }\n  \n  Read more: https://nextjs.org/docs/messages/middleware-new-signature\n  `);\n    }\n}\nexport class RemovedPageError extends Error {\n    constructor(){\n        super(`The request.page has been deprecated in favour of \\`URLPattern\\`.\n  Read more: https://nextjs.org/docs/messages/middleware-request-page\n  `);\n    }\n}\nexport class RemovedUAError extends Error {\n    constructor(){\n        super(`The request.ua has been removed in favour of \\`userAgent\\` function.\n  Read more: https://nextjs.org/docs/messages/middleware-parse-user-agent\n  `);\n    }\n}\n\n//# sourceMappingURL=error.js.map","export function fromNodeHeaders(object) {\n    const headers = new Headers();\n    for (let [key, value] of Object.entries(object)){\n        const values = Array.isArray(value) ? value : [\n            value\n        ];\n        for (let v of values){\n            if (v !== undefined) {\n                headers.append(key, v);\n            }\n        }\n    }\n    return headers;\n}\n/*\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\n  that are within a single set-cookie field-value, such as in the Expires portion.\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\n  React Native's fetch does this for *every* header, including set-cookie.\n  \n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\n*/ export function splitCookiesString(cookiesString) {\n    var cookiesStrings = [];\n    var pos = 0;\n    var start;\n    var ch;\n    var lastComma;\n    var nextStart;\n    var cookiesSeparatorFound;\n    function skipWhitespace() {\n        while(pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))){\n            pos += 1;\n        }\n        return pos < cookiesString.length;\n    }\n    function notSpecialChar() {\n        ch = cookiesString.charAt(pos);\n        return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n    }\n    while(pos < cookiesString.length){\n        start = pos;\n        cookiesSeparatorFound = false;\n        while(skipWhitespace()){\n            ch = cookiesString.charAt(pos);\n            if (ch === \",\") {\n                // ',' is a cookie separator if we have later first '=', not ';' or ','\n                lastComma = pos;\n                pos += 1;\n                skipWhitespace();\n                nextStart = pos;\n                while(pos < cookiesString.length && notSpecialChar()){\n                    pos += 1;\n                }\n                // currently special character\n                if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n                    // we found cookies separator\n                    cookiesSeparatorFound = true;\n                    // pos is inside the next cookie, so back up and return it.\n                    pos = nextStart;\n                    cookiesStrings.push(cookiesString.substring(start, lastComma));\n                    start = pos;\n                } else {\n                    // in param ',' or param separator ';',\n                    // we continue from that comma\n                    pos = lastComma + 1;\n                }\n            } else {\n                pos += 1;\n            }\n        }\n        if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n            cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n        }\n    }\n    return cookiesStrings;\n}\nexport function toNodeHeaders(headers) {\n    const result = {};\n    if (headers) {\n        for (const [key, value] of headers.entries()){\n            result[key] = value;\n            if (key.toLowerCase() === \"set-cookie\") {\n                result[key] = splitCookiesString(value);\n            }\n        }\n    }\n    return result;\n}\n/**\n * Validate the correctness of a user-provided URL.\n */ export function validateURL(url) {\n    try {\n        return String(new URL(String(url)));\n    } catch (error) {\n        throw new Error(`URL is malformed \"${String(url)}\". Please use only absolute URLs - https://nextjs.org/docs/messages/middleware-relative-urls`, {\n            cause: error\n        });\n    }\n}\n\n//# sourceMappingURL=utils.js.map","import { PageSignatureError } from \"../error\";\nconst responseSymbol = Symbol(\"response\");\nconst passThroughSymbol = Symbol(\"passThrough\");\nexport const waitUntilSymbol = Symbol(\"waitUntil\");\nclass FetchEvent {\n    [waitUntilSymbol] = [];\n    [passThroughSymbol] = false;\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    constructor(_request){}\n    respondWith(response) {\n        if (!this[responseSymbol]) {\n            this[responseSymbol] = Promise.resolve(response);\n        }\n    }\n    passThroughOnException() {\n        this[passThroughSymbol] = true;\n    }\n    waitUntil(promise) {\n        this[waitUntilSymbol].push(promise);\n    }\n}\nexport class NextFetchEvent extends FetchEvent {\n    constructor(params){\n        super(params.request);\n        this.sourcePage = params.page;\n    }\n    /**\n   * @deprecated The `request` is now the first parameter and the API is now async.\n   *\n   * Read more: https://nextjs.org/docs/messages/middleware-new-signature\n   */ get request() {\n        throw new PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n    /**\n   * @deprecated Using `respondWith` is no longer needed.\n   *\n   * Read more: https://nextjs.org/docs/messages/middleware-new-signature\n   */ respondWith() {\n        throw new PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n}\n\n//# sourceMappingURL=fetch-event.js.map","export function detectDomainLocale(domainItems, hostname, detectedLocale) {\n    let domainItem;\n    if (domainItems) {\n        if (detectedLocale) {\n            detectedLocale = detectedLocale.toLowerCase();\n        }\n        for (const item of domainItems){\n            var ref, ref1;\n            // remove port if present\n            const domainHostname = (ref = item.domain) == null ? void 0 : ref.split(':')[0].toLowerCase();\n            if (hostname === domainHostname || detectedLocale === item.defaultLocale.toLowerCase() || ((ref1 = item.locales) == null ? void 0 : ref1.some((locale)=>locale.toLowerCase() === detectedLocale))) {\n                domainItem = item;\n                break;\n            }\n        }\n    }\n    return domainItem;\n}\n\n//# sourceMappingURL=detect-domain-locale.js.map","/**\n * Removes the trailing slash for a given route or page path. Preserves the\n * root page. Examples:\n *   - `/foo/bar/` -> `/foo/bar`\n *   - `/foo/bar` -> `/foo/bar`\n *   - `/` -> `/`\n */ export function removeTrailingSlash(route) {\n    return route.replace(/\\/$/, '') || '/';\n}\n\n//# sourceMappingURL=remove-trailing-slash.js.map","/**\n * Given a path this function will find the pathname, query and hash and return\n * them. This is useful to parse full paths on the client side.\n * @param path A path to parse e.g. /foo/bar?id=1#hash\n */ export function parsePath(path) {\n    const hashIndex = path.indexOf('#');\n    const queryIndex = path.indexOf('?');\n    const hasQuery = queryIndex > -1 && (hashIndex < 0 || queryIndex < hashIndex);\n    if (hasQuery || hashIndex > -1) {\n        return {\n            pathname: path.substring(0, hasQuery ? queryIndex : hashIndex),\n            query: hasQuery ? path.substring(queryIndex, hashIndex > -1 ? hashIndex : undefined) : '',\n            hash: hashIndex > -1 ? path.slice(hashIndex) : ''\n        };\n    }\n    return {\n        pathname: path,\n        query: '',\n        hash: ''\n    };\n}\n\n//# sourceMappingURL=parse-path.js.map","import { parsePath } from './parse-path';\n/**\n * Adds the provided prefix to the given path. It first ensures that the path\n * is indeed starting with a slash.\n */ export function addPathPrefix(path, prefix) {\n    if (!path.startsWith('/') || !prefix) {\n        return path;\n    }\n    const { pathname , query , hash  } = parsePath(path);\n    return `${prefix}${pathname}${query}${hash}`;\n}\n\n//# sourceMappingURL=add-path-prefix.js.map","import { parsePath } from './parse-path';\n/**\n * Similarly to `addPathPrefix`, this function adds a suffix at the end on the\n * provided path. It also works only for paths ensuring the argument starts\n * with a slash.\n */ export function addPathSuffix(path, suffix) {\n    if (!path.startsWith('/') || !suffix) {\n        return path;\n    }\n    const { pathname , query , hash  } = parsePath(path);\n    return `${pathname}${suffix}${query}${hash}`;\n}\n\n//# sourceMappingURL=add-path-suffix.js.map","import { parsePath } from './parse-path';\n/**\n * Checks if a given path starts with a given prefix. It ensures it matches\n * exactly without containing extra chars. e.g. prefix /docs should replace\n * for /docs, /docs/, /docs/a but not /docsss\n * @param path The path to check.\n * @param prefix The prefix to check against.\n */ export function pathHasPrefix(path, prefix) {\n    if (typeof path !== 'string') {\n        return false;\n    }\n    const { pathname  } = parsePath(path);\n    return pathname === prefix || pathname.startsWith(prefix + '/');\n}\n\n//# sourceMappingURL=path-has-prefix.js.map","import { addPathPrefix } from './add-path-prefix';\nimport { pathHasPrefix } from './path-has-prefix';\n/**\n * For a given path and a locale, if the locale is given, it will prefix the\n * locale. The path shouldn't be an API path. If a default locale is given the\n * prefix will be omitted if the locale is already the default locale.\n */ export function addLocale(path, locale, defaultLocale, ignorePrefix) {\n    if (locale && locale !== defaultLocale && (ignorePrefix || !pathHasPrefix(path.toLowerCase(), `/${locale.toLowerCase()}`) && !pathHasPrefix(path.toLowerCase(), '/api'))) {\n        return addPathPrefix(path, `/${locale}`);\n    }\n    return path;\n}\n\n//# sourceMappingURL=add-locale.js.map","import { removeTrailingSlash } from './remove-trailing-slash';\nimport { addPathPrefix } from './add-path-prefix';\nimport { addPathSuffix } from './add-path-suffix';\nimport { addLocale } from './add-locale';\nexport function formatNextPathnameInfo(info) {\n    let pathname = addLocale(info.pathname, info.locale, info.buildId ? undefined : info.defaultLocale, info.ignorePrefix);\n    if (info.buildId || !info.trailingSlash) {\n        pathname = removeTrailingSlash(pathname);\n    }\n    if (info.buildId) {\n        pathname = addPathSuffix(addPathPrefix(pathname, `/_next/data/${info.buildId}`), info.pathname === '/' ? 'index.json' : '.json');\n    }\n    pathname = addPathPrefix(pathname, info.basePath);\n    return !info.buildId && info.trailingSlash ? !pathname.endsWith('/') ? addPathSuffix(pathname, '/') : pathname : removeTrailingSlash(pathname);\n}\n\n//# sourceMappingURL=format-next-pathname-info.js.map","/**\n * Takes an object with a hostname property (like a parsed URL) and some\n * headers that may contain Host and returns the preferred hostname.\n * @param parsed An object containing a hostname property.\n * @param headers A dictionary with headers containing a `host`.\n */ export function getHostname(parsed, headers) {\n    var ref;\n    return (ref = !Array.isArray(headers == null ? void 0 : headers.host) && (headers == null ? void 0 : headers.host) || parsed.hostname) == null ? void 0 : ref.split(':')[0].toLowerCase();\n}\n\n//# sourceMappingURL=get-hostname.js.map","/**\n * For a pathname that may include a locale from a list of locales, it\n * removes the locale from the pathname returning it alongside with the\n * detected locale.\n *\n * @param pathname A pathname that may include a locale.\n * @param locales A list of locales.\n * @returns The detected locale and pathname without locale\n */ export function normalizeLocalePath(pathname, locales) {\n    let detectedLocale;\n    // first item will be empty string from splitting at first char\n    const pathnameParts = pathname.split('/');\n    (locales || []).some((locale)=>{\n        if (pathnameParts[1] && pathnameParts[1].toLowerCase() === locale.toLowerCase()) {\n            detectedLocale = locale;\n            pathnameParts.splice(1, 1);\n            pathname = pathnameParts.join('/') || '/';\n            return true;\n        }\n        return false;\n    });\n    return {\n        pathname,\n        detectedLocale\n    };\n}\n\n//# sourceMappingURL=normalize-locale-path.js.map","import { pathHasPrefix } from './path-has-prefix';\n/**\n * Given a path and a prefix it will remove the prefix when it exists in the\n * given path. It ensures it matches exactly without containing extra chars\n * and if the prefix is not there it will be noop.\n * @param path The path to remove the prefix from.\n * @param prefix The prefix to be removed.\n */ export function removePathPrefix(path, prefix) {\n    if (pathHasPrefix(path, prefix)) {\n        const withoutPrefix = path.slice(prefix.length);\n        return withoutPrefix.startsWith('/') ? withoutPrefix : `/${withoutPrefix}`;\n    }\n    return path;\n}\n\n//# sourceMappingURL=remove-path-prefix.js.map","import { normalizeLocalePath } from '../../i18n/normalize-locale-path';\nimport { removePathPrefix } from './remove-path-prefix';\nimport { pathHasPrefix } from './path-has-prefix';\nexport function getNextPathnameInfo(pathname, options) {\n    var _nextConfig;\n    const { basePath , i18n , trailingSlash  } = (_nextConfig = options.nextConfig) != null ? _nextConfig : {};\n    const info = {\n        pathname: pathname,\n        trailingSlash: pathname !== '/' ? pathname.endsWith('/') : trailingSlash\n    };\n    if (basePath && pathHasPrefix(info.pathname, basePath)) {\n        info.pathname = removePathPrefix(info.pathname, basePath);\n        info.basePath = basePath;\n    }\n    if (options.parseData === true && info.pathname.startsWith('/_next/data/') && info.pathname.endsWith('.json')) {\n        const paths = info.pathname.replace(/^\\/_next\\/data\\//, '').replace(/\\.json$/, '').split('/');\n        const buildId = paths[0];\n        info.pathname = paths[1] !== 'index' ? `/${paths.slice(1).join('/')}` : '/';\n        info.buildId = buildId;\n    }\n    if (i18n) {\n        const pathLocale = normalizeLocalePath(info.pathname, i18n.locales);\n        info.locale = pathLocale == null ? void 0 : pathLocale.detectedLocale;\n        info.pathname = (pathLocale == null ? void 0 : pathLocale.pathname) || info.pathname;\n    }\n    return info;\n}\n\n//# sourceMappingURL=get-next-pathname-info.js.map","import { detectDomainLocale } from \"../../shared/lib/i18n/detect-domain-locale\";\nimport { formatNextPathnameInfo } from \"../../shared/lib/router/utils/format-next-pathname-info\";\nimport { getHostname } from \"../../shared/lib/get-hostname\";\nimport { getNextPathnameInfo } from \"../../shared/lib/router/utils/get-next-pathname-info\";\nconst REGEX_LOCALHOST_HOSTNAME = /(?!^https?:\\/\\/)(127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}|::1|localhost)/;\nfunction parseURL(url, base) {\n    return new URL(String(url).replace(REGEX_LOCALHOST_HOSTNAME, \"localhost\"), base && String(base).replace(REGEX_LOCALHOST_HOSTNAME, \"localhost\"));\n}\nconst Internal = Symbol(\"NextURLInternal\");\nexport class NextURL {\n    constructor(input, baseOrOpts, opts){\n        let base;\n        let options;\n        if (typeof baseOrOpts === \"object\" && \"pathname\" in baseOrOpts || typeof baseOrOpts === \"string\") {\n            base = baseOrOpts;\n            options = opts || {};\n        } else {\n            options = opts || baseOrOpts || {};\n        }\n        this[Internal] = {\n            url: parseURL(input, base ?? options.base),\n            options: options,\n            basePath: \"\"\n        };\n        this.analyzeUrl();\n    }\n    analyzeUrl() {\n        var ref, ref1, ref2, ref3, ref4;\n        const pathnameInfo = getNextPathnameInfo(this[Internal].url.pathname, {\n            nextConfig: this[Internal].options.nextConfig,\n            parseData: !process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE\n        });\n        this[Internal].domainLocale = detectDomainLocale((ref = this[Internal].options.nextConfig) == null ? void 0 : (ref1 = ref.i18n) == null ? void 0 : ref1.domains, getHostname(this[Internal].url, this[Internal].options.headers));\n        const defaultLocale = ((ref2 = this[Internal].domainLocale) == null ? void 0 : ref2.defaultLocale) || ((ref3 = this[Internal].options.nextConfig) == null ? void 0 : (ref4 = ref3.i18n) == null ? void 0 : ref4.defaultLocale);\n        this[Internal].url.pathname = pathnameInfo.pathname;\n        this[Internal].defaultLocale = defaultLocale;\n        this[Internal].basePath = pathnameInfo.basePath ?? \"\";\n        this[Internal].buildId = pathnameInfo.buildId;\n        this[Internal].locale = pathnameInfo.locale ?? defaultLocale;\n        this[Internal].trailingSlash = pathnameInfo.trailingSlash;\n    }\n    formatPathname() {\n        return formatNextPathnameInfo({\n            basePath: this[Internal].basePath,\n            buildId: this[Internal].buildId,\n            defaultLocale: !this[Internal].options.forceLocale ? this[Internal].defaultLocale : undefined,\n            locale: this[Internal].locale,\n            pathname: this[Internal].url.pathname,\n            trailingSlash: this[Internal].trailingSlash\n        });\n    }\n    formatSearch() {\n        return this[Internal].url.search;\n    }\n    get buildId() {\n        return this[Internal].buildId;\n    }\n    set buildId(buildId) {\n        this[Internal].buildId = buildId;\n    }\n    get locale() {\n        return this[Internal].locale ?? \"\";\n    }\n    set locale(locale) {\n        var ref, ref5;\n        if (!this[Internal].locale || !((ref = this[Internal].options.nextConfig) == null ? void 0 : (ref5 = ref.i18n) == null ? void 0 : ref5.locales.includes(locale))) {\n            throw new TypeError(`The NextURL configuration includes no locale \"${locale}\"`);\n        }\n        this[Internal].locale = locale;\n    }\n    get defaultLocale() {\n        return this[Internal].defaultLocale;\n    }\n    get domainLocale() {\n        return this[Internal].domainLocale;\n    }\n    get searchParams() {\n        return this[Internal].url.searchParams;\n    }\n    get host() {\n        return this[Internal].url.host;\n    }\n    set host(value) {\n        this[Internal].url.host = value;\n    }\n    get hostname() {\n        return this[Internal].url.hostname;\n    }\n    set hostname(value) {\n        this[Internal].url.hostname = value;\n    }\n    get port() {\n        return this[Internal].url.port;\n    }\n    set port(value) {\n        this[Internal].url.port = value;\n    }\n    get protocol() {\n        return this[Internal].url.protocol;\n    }\n    set protocol(value) {\n        this[Internal].url.protocol = value;\n    }\n    get href() {\n        const pathname = this.formatPathname();\n        const search = this.formatSearch();\n        return `${this.protocol}//${this.host}${pathname}${search}${this.hash}`;\n    }\n    set href(url) {\n        this[Internal].url = parseURL(url);\n        this.analyzeUrl();\n    }\n    get origin() {\n        return this[Internal].url.origin;\n    }\n    get pathname() {\n        return this[Internal].url.pathname;\n    }\n    set pathname(value) {\n        this[Internal].url.pathname = value;\n    }\n    get hash() {\n        return this[Internal].url.hash;\n    }\n    set hash(value) {\n        this[Internal].url.hash = value;\n    }\n    get search() {\n        return this[Internal].url.search;\n    }\n    set search(value) {\n        this[Internal].url.search = value;\n    }\n    get password() {\n        return this[Internal].url.password;\n    }\n    set password(value) {\n        this[Internal].url.password = value;\n    }\n    get username() {\n        return this[Internal].url.username;\n    }\n    set username(value) {\n        this[Internal].url.username = value;\n    }\n    get basePath() {\n        return this[Internal].basePath;\n    }\n    set basePath(value) {\n        this[Internal].basePath = value.startsWith(\"/\") ? value : `/${value}`;\n    }\n    toString() {\n        return this.href;\n    }\n    toJSON() {\n        return this.href;\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            href: this.href,\n            origin: this.origin,\n            protocol: this.protocol,\n            username: this.username,\n            password: this.password,\n            host: this.host,\n            hostname: this.hostname,\n            port: this.port,\n            pathname: this.pathname,\n            search: this.search,\n            searchParams: this.searchParams,\n            hash: this.hash\n        };\n    }\n    clone() {\n        return new NextURL(String(this), this[Internal].options);\n    }\n}\n\n//# sourceMappingURL=next-url.js.map","const SAME_SITE = [\n    \"strict\",\n    \"lax\",\n    \"none\"\n];\nfunction parseSameSite(string) {\n    string = string.toLowerCase();\n    return SAME_SITE.includes(string) ? string : undefined;\n}\nfunction compact(t) {\n    const newT = {};\n    for(const key in t){\n        if (t[key]) {\n            newT[key] = t[key];\n        }\n    }\n    return newT;\n}\nexport function serialize(c) {\n    const attrs = [\n        \"path\" in c && c.path && `Path=${c.path}`,\n        \"expires\" in c && c.expires && `Expires=${c.expires.toUTCString()}`,\n        \"maxAge\" in c && c.maxAge && `Max-Age=${c.maxAge}`,\n        \"domain\" in c && c.domain && `Domain=${c.domain}`,\n        \"secure\" in c && c.secure && \"Secure\",\n        \"httpOnly\" in c && c.httpOnly && \"HttpOnly\",\n        \"sameSite\" in c && c.sameSite && `SameSite=${c.sameSite}`, \n    ].filter(Boolean);\n    return `${c.name}=${encodeURIComponent(c.value ?? \"\")}; ${attrs.join(\"; \")}`;\n}\n/**\n * Parse a `Cookie` or `Set-Cookie header value\n */ export function parseCookieString(cookie) {\n    const map = new Map();\n    for (const pair of cookie.split(/; */)){\n        if (!pair) continue;\n        const [key, value] = pair.split(\"=\", 2);\n        map.set(key, decodeURIComponent(value ?? \"true\"));\n    }\n    return map;\n}\n/**\n * Parse a `Set-Cookie` header value\n */ export function parseSetCookieString(setCookie) {\n    if (!setCookie) {\n        return undefined;\n    }\n    const [[name, value], ...attributes] = parseCookieString(setCookie);\n    const { domain , expires , httponly , maxage , path , samesite , secure  } = Object.fromEntries(attributes.map(([key, v])=>[\n            key.toLowerCase(),\n            v\n        ]));\n    const cookie = {\n        name,\n        value: decodeURIComponent(value),\n        domain,\n        ...expires && {\n            expires: new Date(expires)\n        },\n        ...httponly && {\n            httpOnly: true\n        },\n        ...typeof maxage === \"string\" && {\n            maxAge: Number(maxage)\n        },\n        path,\n        ...samesite && {\n            sameSite: parseSameSite(samesite)\n        },\n        ...secure && {\n            secure: true\n        }\n    };\n    return compact(cookie);\n}\n\n//# sourceMappingURL=serialize.js.map","import { parseCookieString, serialize } from \"./serialize\";\n/**\n * A class for manipulating {@link Request} cookies (`Cookie` header).\n */ export class RequestCookies {\n    _parsed = new Map();\n    constructor(requestHeaders){\n        this._headers = requestHeaders;\n        const header = requestHeaders.get(\"cookie\");\n        if (header) {\n            const parsed = parseCookieString(header);\n            for (const [name, value] of parsed){\n                this._parsed.set(name, {\n                    name,\n                    value\n                });\n            }\n        }\n    }\n    [Symbol.iterator]() {\n        return this._parsed[Symbol.iterator]();\n    }\n    /**\n   * The amount of cookies received from the client\n   */ get size() {\n        return this._parsed.size;\n    }\n    get(...args) {\n        const name = typeof args[0] === \"string\" ? args[0] : args[0].name;\n        return this._parsed.get(name);\n    }\n    getAll(...args) {\n        var ref;\n        const all = Array.from(this._parsed);\n        if (!args.length) {\n            return all.map(([_, value])=>value);\n        }\n        const name = typeof args[0] === \"string\" ? args[0] : (ref = args[0]) == null ? void 0 : ref.name;\n        return all.filter(([n])=>n === name).map(([_, value])=>value);\n    }\n    has(name) {\n        return this._parsed.has(name);\n    }\n    set(...args) {\n        const [name, value] = args.length === 1 ? [\n            args[0].name,\n            args[0].value\n        ] : args;\n        const map = this._parsed;\n        map.set(name, {\n            name,\n            value\n        });\n        this._headers.set(\"cookie\", Array.from(map).map(([_, v])=>serialize(v)).join(\"; \"));\n        return this;\n    }\n    /**\n   * Delete the cookies matching the passed name or names in the request.\n   */ delete(/** Name or names of the cookies to be deleted  */ names) {\n        const map = this._parsed;\n        const result = !Array.isArray(names) ? map.delete(names) : names.map((name)=>map.delete(name));\n        this._headers.set(\"cookie\", Array.from(map).map(([_, value])=>serialize(value)).join(\"; \"));\n        return result;\n    }\n    /**\n   * Delete all the cookies in the cookies in the request.\n   */ clear() {\n        this.delete(Array.from(this._parsed.keys()));\n        return this;\n    }\n    /**\n   * Format the cookies in the request as a string for logging\n   */ [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return `RequestCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;\n    }\n}\n\n//# sourceMappingURL=request-cookies.js.map","import { parseSetCookieString, serialize } from \"./serialize\";\nfunction replace(bag, headers) {\n    headers.delete(\"set-cookie\");\n    for (const [, value] of bag){\n        const serialized = serialize(value);\n        headers.append(\"set-cookie\", serialized);\n    }\n}\nfunction normalizeCookie(cookie = {\n    name: \"\",\n    value: \"\"\n}) {\n    if (cookie.maxAge) {\n        cookie.expires = new Date(Date.now() + cookie.maxAge * 1000);\n    }\n    if (cookie.path === null || cookie.path === undefined) {\n        cookie.path = \"/\";\n    }\n    return cookie;\n}\n/**\n * A class for manipulating {@link Response} cookies (`Set-Cookie` header).\n * Loose implementation of the experimental [Cookie Store API](https://wicg.github.io/cookie-store/#dictdef-cookie)\n * The main difference is `ResponseCookies` methods do not return a Promise.\n */ export class ResponseCookies {\n    _parsed = new Map();\n    constructor(responseHeaders){\n        this._headers = responseHeaders;\n        // @ts-expect-error See https://github.com/whatwg/fetch/issues/973\n        const headers = this._headers.getAll(\"set-cookie\");\n        for (const header of headers){\n            const parsed = parseSetCookieString(header);\n            if (parsed) {\n                this._parsed.set(parsed.name, parsed);\n            }\n        }\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-get CookieStore#get} without the Promise.\n   */ get(...args) {\n        const key = typeof args[0] === \"string\" ? args[0] : args[0].name;\n        return this._parsed.get(key);\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-getAll CookieStore#getAll} without the Promise.\n   */ getAll(...args) {\n        var ref;\n        const all = Array.from(this._parsed.values());\n        if (!args.length) {\n            return all;\n        }\n        const key = typeof args[0] === \"string\" ? args[0] : (ref = args[0]) == null ? void 0 : ref.name;\n        return all.filter((c)=>c.name === key);\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-set CookieStore#set} without the Promise.\n   */ set(...args) {\n        const [name, value, cookie] = args.length === 1 ? [\n            args[0].name,\n            args[0].value,\n            args[0]\n        ] : args;\n        const map = this._parsed;\n        map.set(name, normalizeCookie({\n            name,\n            value,\n            ...cookie\n        }));\n        replace(map, this._headers);\n        return this;\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-delete CookieStore#delete} without the Promise.\n   */ delete(...args) {\n        const name = typeof args[0] === \"string\" ? args[0] : args[0].name;\n        return this.set({\n            name,\n            value: \"\",\n            expires: new Date(0)\n        });\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return `ResponseCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;\n    }\n}\n\n//# sourceMappingURL=response-cookies.js.map","export { RequestCookies } from \"./request-cookies\";\nexport { ResponseCookies } from \"./response-cookies\";\n\n//# sourceMappingURL=index.js.map","import { NextURL } from \"../next-url\";\nimport { toNodeHeaders, validateURL } from \"../utils\";\nimport { RemovedUAError, RemovedPageError } from \"../error\";\nimport { RequestCookies } from \"./cookies\";\nexport const INTERNALS = Symbol(\"internal request\");\nexport class NextRequest extends Request {\n    constructor(input, init = {}){\n        const url = typeof input !== \"string\" && \"url\" in input ? input.url : String(input);\n        validateURL(url);\n        super(url, init);\n        this[INTERNALS] = {\n            cookies: new RequestCookies(this.headers),\n            geo: init.geo || {},\n            ip: init.ip,\n            url: new NextURL(url, {\n                headers: toNodeHeaders(this.headers),\n                nextConfig: init.nextConfig\n            })\n        };\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            cookies: this.cookies,\n            geo: this.geo,\n            ip: this.ip,\n            nextUrl: this.nextUrl,\n            url: this.url,\n            // rest of props come from Request\n            bodyUsed: this.bodyUsed,\n            cache: this.cache,\n            credentials: this.credentials,\n            destination: this.destination,\n            headers: Object.fromEntries(this.headers),\n            integrity: this.integrity,\n            keepalive: this.keepalive,\n            method: this.method,\n            mode: this.mode,\n            redirect: this.redirect,\n            referrer: this.referrer,\n            referrerPolicy: this.referrerPolicy,\n            signal: this.signal\n        };\n    }\n    get cookies() {\n        return this[INTERNALS].cookies;\n    }\n    get geo() {\n        return this[INTERNALS].geo;\n    }\n    get ip() {\n        return this[INTERNALS].ip;\n    }\n    get nextUrl() {\n        return this[INTERNALS].url;\n    }\n    /**\n   * @deprecated\n   * `page` has been deprecated in favour of `URLPattern`.\n   * Read more: https://nextjs.org/docs/messages/middleware-request-page\n   */ get page() {\n        throw new RemovedPageError();\n    }\n    /**\n   * @deprecated\n   * `ua` has been removed in favour of \\`userAgent\\` function.\n   * Read more: https://nextjs.org/docs/messages/middleware-parse-user-agent\n   */ get ua() {\n        throw new RemovedUAError();\n    }\n    get url() {\n        return this[INTERNALS].url.toString();\n    }\n}\n\n//# sourceMappingURL=request.js.map","import { NextURL } from \"../next-url\";\nimport { toNodeHeaders, validateURL } from \"../utils\";\nimport { ResponseCookies } from \"./cookies\";\nconst INTERNALS = Symbol(\"internal response\");\nconst REDIRECTS = new Set([\n    301,\n    302,\n    303,\n    307,\n    308\n]);\nfunction handleMiddlewareField(init, headers) {\n    var ref;\n    if (init == null ? void 0 : (ref = init.request) == null ? void 0 : ref.headers) {\n        if (!(init.request.headers instanceof Headers)) {\n            throw new Error(\"request.headers must be an instance of Headers\");\n        }\n        const keys = [];\n        for (const [key, value] of init.request.headers){\n            headers.set(\"x-middleware-request-\" + key, value);\n            keys.push(key);\n        }\n        headers.set(\"x-middleware-override-headers\", keys.join(\",\"));\n    }\n}\nexport class NextResponse extends Response {\n    constructor(body, init = {}){\n        super(body, init);\n        this[INTERNALS] = {\n            cookies: new ResponseCookies(this.headers),\n            url: init.url ? new NextURL(init.url, {\n                headers: toNodeHeaders(this.headers),\n                nextConfig: init.nextConfig\n            }) : undefined\n        };\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            cookies: this.cookies,\n            url: this.url,\n            // rest of props come from Response\n            body: this.body,\n            bodyUsed: this.bodyUsed,\n            headers: Object.fromEntries(this.headers),\n            ok: this.ok,\n            redirected: this.redirected,\n            status: this.status,\n            statusText: this.statusText,\n            type: this.type\n        };\n    }\n    get cookies() {\n        return this[INTERNALS].cookies;\n    }\n    static json(body, init) {\n        // @ts-expect-error This is not in lib/dom right now, and we can't augment it.\n        const response = Response.json(body, init);\n        return new NextResponse(response.body, response);\n    }\n    static redirect(url, init) {\n        const status = typeof init === \"number\" ? init : (init == null ? void 0 : init.status) ?? 307;\n        if (!REDIRECTS.has(status)) {\n            throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n        }\n        const initObj = typeof init === \"object\" ? init : {};\n        const headers = new Headers(initObj == null ? void 0 : initObj.headers);\n        headers.set(\"Location\", validateURL(url));\n        return new NextResponse(null, {\n            ...initObj,\n            headers,\n            status\n        });\n    }\n    static rewrite(destination, init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set(\"x-middleware-rewrite\", validateURL(destination));\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n    static next(init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set(\"x-middleware-next\", \"1\");\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n}\n\n//# sourceMappingURL=response.js.map","/**\n * Given a URL as a string and a base URL it will make the URL relative\n * if the parsed protocol and host is the same as the one in the base\n * URL. Otherwise it returns the same URL string.\n */ export function relativizeURL(url, base) {\n    const baseURL = typeof base === 'string' ? new URL(base) : base;\n    const relative = new URL(url, base);\n    const origin = `${baseURL.protocol}//${baseURL.host}`;\n    return `${relative.protocol}//${relative.host}` === origin ? relative.toString().replace(origin, '') : relative.toString();\n}\n\n//# sourceMappingURL=relativize-url.js.map","const INTERNAL_QUERY_NAMES = [\n    \"__nextFallback\",\n    \"__nextLocale\",\n    \"__nextDefaultLocale\",\n    \"__nextIsNotFound\",\n    // RSC\n    \"__rsc__\",\n    // Routing\n    \"__next_router_state_tree__\",\n    \"__next_router_prefetch__\", \n];\nconst EXTENDED_INTERNAL_QUERY_NAMES = [\n    \"__nextDataReq\"\n];\nexport function stripInternalQueries(query) {\n    for (const name of INTERNAL_QUERY_NAMES){\n        delete query[name];\n    }\n}\nexport function stripInternalSearchParams(searchParams, extended) {\n    for (const name of INTERNAL_QUERY_NAMES){\n        searchParams.delete(name);\n    }\n    if (extended) {\n        for (const name of EXTENDED_INTERNAL_QUERY_NAMES){\n            searchParams.delete(name);\n        }\n    }\n    return searchParams;\n}\n\n//# sourceMappingURL=internal-utils.js.map","// remove (name) from pathname as it's not considered for routing\nexport function normalizeAppPath(pathname) {\n    return pathname.split('/').reduce((acc, segment, index, segments)=>{\n        // Empty segments are ignored.\n        if (!segment) {\n            return acc;\n        }\n        if (segment.startsWith('(') && segment.endsWith(')')) {\n            return acc;\n        }\n        if (segment.startsWith('@')) {\n            return acc;\n        }\n        if (segment === 'page' && index === segments.length - 1) {\n            return acc;\n        }\n        return acc + `/${segment}`;\n    }, '');\n}\nexport function normalizeRscPath(pathname, enabled) {\n    return enabled ? pathname.replace(/\\.rsc($|\\?)/, '') : pathname;\n}\n\n//# sourceMappingURL=app-paths.js.map","import { PageSignatureError } from \"./error\";\nimport { fromNodeHeaders } from \"./utils\";\nimport { NextFetchEvent } from \"./spec-extension/fetch-event\";\nimport { NextRequest } from \"./spec-extension/request\";\nimport { NextResponse } from \"./spec-extension/response\";\nimport { relativizeURL } from \"../../shared/lib/router/utils/relativize-url\";\nimport { waitUntilSymbol } from \"./spec-extension/fetch-event\";\nimport { NextURL } from \"./next-url\";\nimport { stripInternalSearchParams } from \"../internal-utils\";\nimport { normalizeRscPath } from \"../../shared/lib/router/utils/app-paths\";\nclass NextRequestHint extends NextRequest {\n    constructor(params){\n        super(params.input, params.init);\n        this.sourcePage = params.page;\n    }\n    get request() {\n        throw new PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n    respondWith() {\n        throw new PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n    waitUntil() {\n        throw new PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n}\nconst FLIGHT_PARAMETERS = [\n    \"__rsc__\",\n    \"__next_router_state_tree__\",\n    \"__next_router_prefetch__\", \n];\nexport async function adapter(params) {\n    // TODO-APP: use explicit marker for this\n    const isEdgeRendering = typeof self.__BUILD_MANIFEST !== \"undefined\";\n    params.request.url = normalizeRscPath(params.request.url, true);\n    const requestUrl = new NextURL(params.request.url, {\n        headers: params.request.headers,\n        nextConfig: params.request.nextConfig\n    });\n    // Ensure users only see page requests, never data requests.\n    const buildId = requestUrl.buildId;\n    requestUrl.buildId = \"\";\n    const isDataReq = params.request.headers[\"x-nextjs-data\"];\n    if (isDataReq && requestUrl.pathname === \"/index\") {\n        requestUrl.pathname = \"/\";\n    }\n    const requestHeaders = fromNodeHeaders(params.request.headers);\n    // Parameters should only be stripped for middleware\n    if (!isEdgeRendering) {\n        for (const param of FLIGHT_PARAMETERS){\n            requestHeaders.delete(param);\n        }\n    }\n    // Strip internal query parameters off the request.\n    stripInternalSearchParams(requestUrl.searchParams, true);\n    const request = new NextRequestHint({\n        page: params.page,\n        input: String(requestUrl),\n        init: {\n            body: params.request.body,\n            geo: params.request.geo,\n            headers: requestHeaders,\n            ip: params.request.ip,\n            method: params.request.method,\n            nextConfig: params.request.nextConfig\n        }\n    });\n    /**\n   * This allows to identify the request as a data request. The user doesn't\n   * need to know about this property neither use it. We add it for testing\n   * purposes.\n   */ if (isDataReq) {\n        Object.defineProperty(request, \"__isData\", {\n            enumerable: false,\n            value: true\n        });\n    }\n    const event = new NextFetchEvent({\n        request,\n        page: params.page\n    });\n    let response = await params.handler(request, event);\n    // check if response is a Response object\n    if (response && !(response instanceof Response)) {\n        throw new TypeError(\"Expected an instance of Response to be returned\");\n    }\n    /**\n   * For rewrites we must always include the locale in the final pathname\n   * so we re-create the NextURL forcing it to include it when the it is\n   * an internal rewrite. Also we make sure the outgoing rewrite URL is\n   * a data URL if the request was a data request.\n   */ const rewrite = response == null ? void 0 : response.headers.get(\"x-middleware-rewrite\");\n    if (response && rewrite) {\n        const rewriteUrl = new NextURL(rewrite, {\n            forceLocale: true,\n            headers: params.request.headers,\n            nextConfig: params.request.nextConfig\n        });\n        if (!process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE) {\n            if (rewriteUrl.host === request.nextUrl.host) {\n                rewriteUrl.buildId = buildId || rewriteUrl.buildId;\n                response.headers.set(\"x-middleware-rewrite\", String(rewriteUrl));\n            }\n        }\n        /**\n     * When the request is a data request we must show if there was a rewrite\n     * with an internal header so the client knows which component to load\n     * from the data request.\n     */ if (isDataReq) {\n            response.headers.set(\"x-nextjs-rewrite\", relativizeURL(String(rewriteUrl), String(requestUrl)));\n        }\n    }\n    /**\n   * For redirects we will not include the locale in case when it is the\n   * default and we must also make sure the outgoing URL is a data one if\n   * the incoming request was a data request.\n   */ const redirect = response == null ? void 0 : response.headers.get(\"Location\");\n    if (response && redirect) {\n        const redirectURL = new NextURL(redirect, {\n            forceLocale: false,\n            headers: params.request.headers,\n            nextConfig: params.request.nextConfig\n        });\n        /**\n     * Responses created from redirects have immutable headers so we have\n     * to clone the response to be able to modify it.\n     */ response = new Response(response.body, response);\n        if (!process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE) {\n            if (redirectURL.host === request.nextUrl.host) {\n                redirectURL.buildId = buildId || redirectURL.buildId;\n                response.headers.set(\"Location\", String(redirectURL));\n            }\n        }\n        /**\n     * When the request is a data request we can't use the location header as\n     * it may end up with CORS error. Instead we map to an internal header so\n     * the client knows the destination.\n     */ if (isDataReq) {\n            response.headers.delete(\"Location\");\n            response.headers.set(\"x-nextjs-redirect\", relativizeURL(String(redirectURL), String(requestUrl)));\n        }\n    }\n    return {\n        response: response || NextResponse.next(),\n        waitUntil: Promise.all(event[waitUntilSymbol])\n    };\n}\nexport function blockUnallowedResponse(promise) {\n    if (process.env.__NEXT_ALLOW_MIDDLEWARE_RESPONSE_BODY) {\n        return promise;\n    }\n    return promise.then((result)=>{\n        var ref;\n        if ((ref = result.response) == null ? void 0 : ref.body) {\n            console.error(new Error(`A middleware can not alter response's body. Learn more: https://nextjs.org/docs/messages/returning-response-body-in-middleware`));\n            return {\n                ...result,\n                response: new Response(\"Internal Server Error\", {\n                    status: 500,\n                    statusText: \"Internal Server Error\"\n                })\n            };\n        }\n        return result;\n    });\n}\nfunction getUnsupportedModuleErrorMessage(module) {\n    // warning: if you change these messages, you must adjust how react-dev-overlay's middleware detects modules not found\n    return `The edge runtime does not support Node.js '${module}' module.\nLearn More: https://nextjs.org/docs/messages/node-module-in-edge-runtime`;\n}\nfunction __import_unsupported(moduleName) {\n    const proxy = new Proxy(function() {}, {\n        get (_obj, prop) {\n            if (prop === \"then\") {\n                return {};\n            }\n            throw new Error(getUnsupportedModuleErrorMessage(moduleName));\n        },\n        construct () {\n            throw new Error(getUnsupportedModuleErrorMessage(moduleName));\n        },\n        apply (_target, _this, args) {\n            if (typeof args[0] === \"function\") {\n                return args[0](proxy);\n            }\n            throw new Error(getUnsupportedModuleErrorMessage(moduleName));\n        }\n    });\n    return new Proxy({}, {\n        get: ()=>proxy\n    });\n}\nexport function enhanceGlobals() {\n    // The condition is true when the \"process\" module is provided\n    if (process !== global.process) {\n        // prefer local process but global.process has correct \"env\"\n        process.env = global.process.env;\n        global.process = process;\n    }\n    // to allow building code that import but does not use node.js modules,\n    // webpack will expect this function to exist in global scope\n    Object.defineProperty(globalThis, \"__import_unsupported\", {\n        value: __import_unsupported,\n        enumerable: false,\n        configurable: false\n    });\n}\n\n//# sourceMappingURL=adapter.js.map","// runtime can't be in strict mode because a global variable is assign and maybe created.\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[727],{\n\n/***/ 898:\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var next_dist_esm_server_web_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(316);\n\n        \n\n        (0,next_dist_esm_server_web_adapter__WEBPACK_IMPORTED_MODULE_0__/* .enhanceGlobals */ .gL)()\n\n        var mod = __webpack_require__(612)\n        var handler = mod.middleware || mod.default;\n\n        if (typeof handler !== 'function') {\n          throw new Error('The Edge Function \"pages/api/top-tracks\" must export a `default` function');\n        }\n\n        /* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(opts) {\n          return (0,next_dist_esm_server_web_adapter__WEBPACK_IMPORTED_MODULE_0__/* .adapter */ .VL)({\n              ...opts,\n              page: \"/api/top-tracks\",\n              handler,\n          })\n        }\n    \n\n/***/ }),\n\n/***/ 51:\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"V\": () => (/* binding */ getTopTracks),\n/* harmony export */   \"e\": () => (/* binding */ getNowPlaying)\n/* harmony export */ });\nconst client_id = process.env.SPOTIFY_CLIENT_ID;\nconst client_secret = process.env.SPOTIFY_CLIENT_SECRET;\nconst refresh_token = process.env.SPOTIFY_REFRESH_TOKEN;\nconst basic = btoa(`${client_id}:${client_secret}`);\nconst NOW_PLAYING_ENDPOINT = `https://api.spotify.com/v1/me/player/currently-playing`;\nconst TOP_TRACKS_ENDPOINT = `https://api.spotify.com/v1/me/top/tracks`;\nconst TOKEN_ENDPOINT = `https://accounts.spotify.com/api/token`;\nconst getAccessToken = async ()=>{\n    const response = await fetch(TOKEN_ENDPOINT, {\n        method: \"POST\",\n        headers: {\n            Authorization: `Basic ${basic}`,\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body: new URLSearchParams({\n            grant_type: \"refresh_token\",\n            refresh_token\n        })\n    });\n    return response.json();\n};\nconst getNowPlaying = async ()=>{\n    const { access_token  } = await getAccessToken();\n    return fetch(NOW_PLAYING_ENDPOINT, {\n        headers: {\n            Authorization: `Bearer ${access_token}`\n        }\n    });\n};\nconst getTopTracks = async ()=>{\n    const { access_token  } = await getAccessToken();\n    return fetch(TOP_TRACKS_ENDPOINT, {\n        headers: {\n            Authorization: `Bearer ${access_token}`\n        }\n    });\n};\n\n\n/***/ }),\n\n/***/ 612:\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"config\": () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var lib_spotify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51);\n\nconst config = {\n    runtime: \"experimental-edge\"\n};\nasync function handler(req) {\n    const response = await (0,lib_spotify__WEBPACK_IMPORTED_MODULE_0__/* .getTopTracks */ .V)();\n    const { items  } = await response.json();\n    const tracks = items.slice(0, 10).map((track)=>({\n            artist: track.artists.map((_artist)=>_artist.name).join(\", \"),\n            songUrl: track.external_urls.spotify,\n            title: track.name\n        }));\n    return new Response(JSON.stringify({\n        tracks\n    }), {\n        status: 200,\n        headers: {\n            \"content-type\": \"application/json\",\n            \"cache-control\": \"public, s-maxage=86400, stale-while-revalidate=43200\"\n        }\n    });\n}\n\n\n/***/ }),\n\n/***/ 316:\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"VL\": () => (/* binding */ adapter),\n  \"gL\": () => (/* binding */ enhanceGlobals)\n});\n\n// UNUSED EXPORTS: blockUnallowedResponse\n\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/error.js\nclass PageSignatureError extends Error {\n    constructor({ page  }){\n        super(`The middleware \"${page}\" accepts an async API directly with the form:\n  \n  export function middleware(request, event) {\n    return NextResponse.redirect('/new-location')\n  }\n  \n  Read more: https://nextjs.org/docs/messages/middleware-new-signature\n  `);\n    }\n}\nclass RemovedPageError extends Error {\n    constructor(){\n        super(`The request.page has been deprecated in favour of \\`URLPattern\\`.\n  Read more: https://nextjs.org/docs/messages/middleware-request-page\n  `);\n    }\n}\nclass RemovedUAError extends Error {\n    constructor(){\n        super(`The request.ua has been removed in favour of \\`userAgent\\` function.\n  Read more: https://nextjs.org/docs/messages/middleware-parse-user-agent\n  `);\n    }\n}\n\n//# sourceMappingURL=error.js.map\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/utils.js\nfunction fromNodeHeaders(object) {\n    const headers = new Headers();\n    for (let [key, value] of Object.entries(object)){\n        const values = Array.isArray(value) ? value : [\n            value\n        ];\n        for (let v of values){\n            if (v !== undefined) {\n                headers.append(key, v);\n            }\n        }\n    }\n    return headers;\n}\n/*\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\n  that are within a single set-cookie field-value, such as in the Expires portion.\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\n  React Native's fetch does this for *every* header, including set-cookie.\n  \n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\n*/ function splitCookiesString(cookiesString) {\n    var cookiesStrings = [];\n    var pos = 0;\n    var start;\n    var ch;\n    var lastComma;\n    var nextStart;\n    var cookiesSeparatorFound;\n    function skipWhitespace() {\n        while(pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))){\n            pos += 1;\n        }\n        return pos < cookiesString.length;\n    }\n    function notSpecialChar() {\n        ch = cookiesString.charAt(pos);\n        return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n    }\n    while(pos < cookiesString.length){\n        start = pos;\n        cookiesSeparatorFound = false;\n        while(skipWhitespace()){\n            ch = cookiesString.charAt(pos);\n            if (ch === \",\") {\n                // ',' is a cookie separator if we have later first '=', not ';' or ','\n                lastComma = pos;\n                pos += 1;\n                skipWhitespace();\n                nextStart = pos;\n                while(pos < cookiesString.length && notSpecialChar()){\n                    pos += 1;\n                }\n                // currently special character\n                if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n                    // we found cookies separator\n                    cookiesSeparatorFound = true;\n                    // pos is inside the next cookie, so back up and return it.\n                    pos = nextStart;\n                    cookiesStrings.push(cookiesString.substring(start, lastComma));\n                    start = pos;\n                } else {\n                    // in param ',' or param separator ';',\n                    // we continue from that comma\n                    pos = lastComma + 1;\n                }\n            } else {\n                pos += 1;\n            }\n        }\n        if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n            cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n        }\n    }\n    return cookiesStrings;\n}\nfunction toNodeHeaders(headers) {\n    const result = {};\n    if (headers) {\n        for (const [key, value] of headers.entries()){\n            result[key] = value;\n            if (key.toLowerCase() === \"set-cookie\") {\n                result[key] = splitCookiesString(value);\n            }\n        }\n    }\n    return result;\n}\n/**\n * Validate the correctness of a user-provided URL.\n */ function validateURL(url) {\n    try {\n        return String(new URL(String(url)));\n    } catch (error) {\n        throw new Error(`URL is malformed \"${String(url)}\". Please use only absolute URLs - https://nextjs.org/docs/messages/middleware-relative-urls`, {\n            cause: error\n        });\n    }\n}\n\n//# sourceMappingURL=utils.js.map\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/spec-extension/fetch-event.js\n\nconst responseSymbol = Symbol(\"response\");\nconst passThroughSymbol = Symbol(\"passThrough\");\nconst waitUntilSymbol = Symbol(\"waitUntil\");\nclass FetchEvent {\n    [waitUntilSymbol] = [];\n    [passThroughSymbol] = false;\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    constructor(_request){}\n    respondWith(response) {\n        if (!this[responseSymbol]) {\n            this[responseSymbol] = Promise.resolve(response);\n        }\n    }\n    passThroughOnException() {\n        this[passThroughSymbol] = true;\n    }\n    waitUntil(promise) {\n        this[waitUntilSymbol].push(promise);\n    }\n}\nclass NextFetchEvent extends FetchEvent {\n    constructor(params){\n        super(params.request);\n        this.sourcePage = params.page;\n    }\n    /**\n   * @deprecated The `request` is now the first parameter and the API is now async.\n   *\n   * Read more: https://nextjs.org/docs/messages/middleware-new-signature\n   */ get request() {\n        throw new PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n    /**\n   * @deprecated Using `respondWith` is no longer needed.\n   *\n   * Read more: https://nextjs.org/docs/messages/middleware-new-signature\n   */ respondWith() {\n        throw new PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n}\n\n//# sourceMappingURL=fetch-event.js.map\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/i18n/detect-domain-locale.js\nfunction detectDomainLocale(domainItems, hostname, detectedLocale) {\n    let domainItem;\n    if (domainItems) {\n        if (detectedLocale) {\n            detectedLocale = detectedLocale.toLowerCase();\n        }\n        for (const item of domainItems){\n            var ref, ref1;\n            // remove port if present\n            const domainHostname = (ref = item.domain) == null ? void 0 : ref.split(\":\")[0].toLowerCase();\n            if (hostname === domainHostname || detectedLocale === item.defaultLocale.toLowerCase() || ((ref1 = item.locales) == null ? void 0 : ref1.some((locale)=>locale.toLowerCase() === detectedLocale))) {\n                domainItem = item;\n                break;\n            }\n        }\n    }\n    return domainItem;\n} //# sourceMappingURL=detect-domain-locale.js.map\n\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/remove-trailing-slash.js\n/**\n * Removes the trailing slash for a given route or page path. Preserves the\n * root page. Examples:\n *   - `/foo/bar/` -> `/foo/bar`\n *   - `/foo/bar` -> `/foo/bar`\n *   - `/` -> `/`\n */ function removeTrailingSlash(route) {\n    return route.replace(/\\/$/, \"\") || \"/\";\n} //# sourceMappingURL=remove-trailing-slash.js.map\n\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/parse-path.js\n/**\n * Given a path this function will find the pathname, query and hash and return\n * them. This is useful to parse full paths on the client side.\n * @param path A path to parse e.g. /foo/bar?id=1#hash\n */ function parsePath(path) {\n    const hashIndex = path.indexOf(\"#\");\n    const queryIndex = path.indexOf(\"?\");\n    const hasQuery = queryIndex > -1 && (hashIndex < 0 || queryIndex < hashIndex);\n    if (hasQuery || hashIndex > -1) {\n        return {\n            pathname: path.substring(0, hasQuery ? queryIndex : hashIndex),\n            query: hasQuery ? path.substring(queryIndex, hashIndex > -1 ? hashIndex : undefined) : \"\",\n            hash: hashIndex > -1 ? path.slice(hashIndex) : \"\"\n        };\n    }\n    return {\n        pathname: path,\n        query: \"\",\n        hash: \"\"\n    };\n} //# sourceMappingURL=parse-path.js.map\n\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/add-path-prefix.js\n\n/**\n * Adds the provided prefix to the given path. It first ensures that the path\n * is indeed starting with a slash.\n */ function addPathPrefix(path, prefix) {\n    if (!path.startsWith(\"/\") || !prefix) {\n        return path;\n    }\n    const { pathname , query , hash  } = parsePath(path);\n    return `${prefix}${pathname}${query}${hash}`;\n} //# sourceMappingURL=add-path-prefix.js.map\n\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/add-path-suffix.js\n\n/**\n * Similarly to `addPathPrefix`, this function adds a suffix at the end on the\n * provided path. It also works only for paths ensuring the argument starts\n * with a slash.\n */ function addPathSuffix(path, suffix) {\n    if (!path.startsWith(\"/\") || !suffix) {\n        return path;\n    }\n    const { pathname , query , hash  } = parsePath(path);\n    return `${pathname}${suffix}${query}${hash}`;\n} //# sourceMappingURL=add-path-suffix.js.map\n\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/path-has-prefix.js\n\n/**\n * Checks if a given path starts with a given prefix. It ensures it matches\n * exactly without containing extra chars. e.g. prefix /docs should replace\n * for /docs, /docs/, /docs/a but not /docsss\n * @param path The path to check.\n * @param prefix The prefix to check against.\n */ function pathHasPrefix(path, prefix) {\n    if (typeof path !== \"string\") {\n        return false;\n    }\n    const { pathname  } = parsePath(path);\n    return pathname === prefix || pathname.startsWith(prefix + \"/\");\n} //# sourceMappingURL=path-has-prefix.js.map\n\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/add-locale.js\n\n\n/**\n * For a given path and a locale, if the locale is given, it will prefix the\n * locale. The path shouldn't be an API path. If a default locale is given the\n * prefix will be omitted if the locale is already the default locale.\n */ function addLocale(path, locale, defaultLocale, ignorePrefix) {\n    if (locale && locale !== defaultLocale && (ignorePrefix || !pathHasPrefix(path.toLowerCase(), `/${locale.toLowerCase()}`) && !pathHasPrefix(path.toLowerCase(), \"/api\"))) {\n        return addPathPrefix(path, `/${locale}`);\n    }\n    return path;\n} //# sourceMappingURL=add-locale.js.map\n\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/format-next-pathname-info.js\n\n\n\n\nfunction formatNextPathnameInfo(info) {\n    let pathname = addLocale(info.pathname, info.locale, info.buildId ? undefined : info.defaultLocale, info.ignorePrefix);\n    if (info.buildId || !info.trailingSlash) {\n        pathname = removeTrailingSlash(pathname);\n    }\n    if (info.buildId) {\n        pathname = addPathSuffix(addPathPrefix(pathname, `/_next/data/${info.buildId}`), info.pathname === \"/\" ? \"index.json\" : \".json\");\n    }\n    pathname = addPathPrefix(pathname, info.basePath);\n    return !info.buildId && info.trailingSlash ? !pathname.endsWith(\"/\") ? addPathSuffix(pathname, \"/\") : pathname : removeTrailingSlash(pathname);\n} //# sourceMappingURL=format-next-pathname-info.js.map\n\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/get-hostname.js\n/**\n * Takes an object with a hostname property (like a parsed URL) and some\n * headers that may contain Host and returns the preferred hostname.\n * @param parsed An object containing a hostname property.\n * @param headers A dictionary with headers containing a `host`.\n */ function getHostname(parsed, headers) {\n    var ref;\n    return (ref = !Array.isArray(headers == null ? void 0 : headers.host) && (headers == null ? void 0 : headers.host) || parsed.hostname) == null ? void 0 : ref.split(\":\")[0].toLowerCase();\n} //# sourceMappingURL=get-hostname.js.map\n\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/i18n/normalize-locale-path.js\n/**\n * For a pathname that may include a locale from a list of locales, it\n * removes the locale from the pathname returning it alongside with the\n * detected locale.\n *\n * @param pathname A pathname that may include a locale.\n * @param locales A list of locales.\n * @returns The detected locale and pathname without locale\n */ function normalizeLocalePath(pathname, locales) {\n    let detectedLocale;\n    // first item will be empty string from splitting at first char\n    const pathnameParts = pathname.split(\"/\");\n    (locales || []).some((locale)=>{\n        if (pathnameParts[1] && pathnameParts[1].toLowerCase() === locale.toLowerCase()) {\n            detectedLocale = locale;\n            pathnameParts.splice(1, 1);\n            pathname = pathnameParts.join(\"/\") || \"/\";\n            return true;\n        }\n        return false;\n    });\n    return {\n        pathname,\n        detectedLocale\n    };\n} //# sourceMappingURL=normalize-locale-path.js.map\n\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/remove-path-prefix.js\n\n/**\n * Given a path and a prefix it will remove the prefix when it exists in the\n * given path. It ensures it matches exactly without containing extra chars\n * and if the prefix is not there it will be noop.\n * @param path The path to remove the prefix from.\n * @param prefix The prefix to be removed.\n */ function removePathPrefix(path, prefix) {\n    if (pathHasPrefix(path, prefix)) {\n        const withoutPrefix = path.slice(prefix.length);\n        return withoutPrefix.startsWith(\"/\") ? withoutPrefix : `/${withoutPrefix}`;\n    }\n    return path;\n} //# sourceMappingURL=remove-path-prefix.js.map\n\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/get-next-pathname-info.js\n\n\n\nfunction getNextPathnameInfo(pathname, options) {\n    var _nextConfig;\n    const { basePath , i18n , trailingSlash  } = (_nextConfig = options.nextConfig) != null ? _nextConfig : {};\n    const info = {\n        pathname: pathname,\n        trailingSlash: pathname !== \"/\" ? pathname.endsWith(\"/\") : trailingSlash\n    };\n    if (basePath && pathHasPrefix(info.pathname, basePath)) {\n        info.pathname = removePathPrefix(info.pathname, basePath);\n        info.basePath = basePath;\n    }\n    if (options.parseData === true && info.pathname.startsWith(\"/_next/data/\") && info.pathname.endsWith(\".json\")) {\n        const paths = info.pathname.replace(/^\\/_next\\/data\\//, \"\").replace(/\\.json$/, \"\").split(\"/\");\n        const buildId = paths[0];\n        info.pathname = paths[1] !== \"index\" ? `/${paths.slice(1).join(\"/\")}` : \"/\";\n        info.buildId = buildId;\n    }\n    if (i18n) {\n        const pathLocale = normalizeLocalePath(info.pathname, i18n.locales);\n        info.locale = pathLocale == null ? void 0 : pathLocale.detectedLocale;\n        info.pathname = (pathLocale == null ? void 0 : pathLocale.pathname) || info.pathname;\n    }\n    return info;\n} //# sourceMappingURL=get-next-pathname-info.js.map\n\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/next-url.js\n\n\n\n\nconst REGEX_LOCALHOST_HOSTNAME = /(?!^https?:\\/\\/)(127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}|::1|localhost)/;\nfunction parseURL(url, base) {\n    return new URL(String(url).replace(REGEX_LOCALHOST_HOSTNAME, \"localhost\"), base && String(base).replace(REGEX_LOCALHOST_HOSTNAME, \"localhost\"));\n}\nconst Internal = Symbol(\"NextURLInternal\");\nclass NextURL {\n    constructor(input, baseOrOpts, opts){\n        let base;\n        let options;\n        if (typeof baseOrOpts === \"object\" && \"pathname\" in baseOrOpts || typeof baseOrOpts === \"string\") {\n            base = baseOrOpts;\n            options = opts || {};\n        } else {\n            options = opts || baseOrOpts || {};\n        }\n        this[Internal] = {\n            url: parseURL(input, base ?? options.base),\n            options: options,\n            basePath: \"\"\n        };\n        this.analyzeUrl();\n    }\n    analyzeUrl() {\n        var ref, ref1, ref2, ref3, ref4;\n        const pathnameInfo = getNextPathnameInfo(this[Internal].url.pathname, {\n            nextConfig: this[Internal].options.nextConfig,\n            parseData: !undefined\n        });\n        this[Internal].domainLocale = detectDomainLocale((ref = this[Internal].options.nextConfig) == null ? void 0 : (ref1 = ref.i18n) == null ? void 0 : ref1.domains, getHostname(this[Internal].url, this[Internal].options.headers));\n        const defaultLocale = ((ref2 = this[Internal].domainLocale) == null ? void 0 : ref2.defaultLocale) || ((ref3 = this[Internal].options.nextConfig) == null ? void 0 : (ref4 = ref3.i18n) == null ? void 0 : ref4.defaultLocale);\n        this[Internal].url.pathname = pathnameInfo.pathname;\n        this[Internal].defaultLocale = defaultLocale;\n        this[Internal].basePath = pathnameInfo.basePath ?? \"\";\n        this[Internal].buildId = pathnameInfo.buildId;\n        this[Internal].locale = pathnameInfo.locale ?? defaultLocale;\n        this[Internal].trailingSlash = pathnameInfo.trailingSlash;\n    }\n    formatPathname() {\n        return formatNextPathnameInfo({\n            basePath: this[Internal].basePath,\n            buildId: this[Internal].buildId,\n            defaultLocale: !this[Internal].options.forceLocale ? this[Internal].defaultLocale : undefined,\n            locale: this[Internal].locale,\n            pathname: this[Internal].url.pathname,\n            trailingSlash: this[Internal].trailingSlash\n        });\n    }\n    formatSearch() {\n        return this[Internal].url.search;\n    }\n    get buildId() {\n        return this[Internal].buildId;\n    }\n    set buildId(buildId) {\n        this[Internal].buildId = buildId;\n    }\n    get locale() {\n        return this[Internal].locale ?? \"\";\n    }\n    set locale(locale) {\n        var ref, ref5;\n        if (!this[Internal].locale || !((ref = this[Internal].options.nextConfig) == null ? void 0 : (ref5 = ref.i18n) == null ? void 0 : ref5.locales.includes(locale))) {\n            throw new TypeError(`The NextURL configuration includes no locale \"${locale}\"`);\n        }\n        this[Internal].locale = locale;\n    }\n    get defaultLocale() {\n        return this[Internal].defaultLocale;\n    }\n    get domainLocale() {\n        return this[Internal].domainLocale;\n    }\n    get searchParams() {\n        return this[Internal].url.searchParams;\n    }\n    get host() {\n        return this[Internal].url.host;\n    }\n    set host(value) {\n        this[Internal].url.host = value;\n    }\n    get hostname() {\n        return this[Internal].url.hostname;\n    }\n    set hostname(value) {\n        this[Internal].url.hostname = value;\n    }\n    get port() {\n        return this[Internal].url.port;\n    }\n    set port(value) {\n        this[Internal].url.port = value;\n    }\n    get protocol() {\n        return this[Internal].url.protocol;\n    }\n    set protocol(value) {\n        this[Internal].url.protocol = value;\n    }\n    get href() {\n        const pathname = this.formatPathname();\n        const search = this.formatSearch();\n        return `${this.protocol}//${this.host}${pathname}${search}${this.hash}`;\n    }\n    set href(url) {\n        this[Internal].url = parseURL(url);\n        this.analyzeUrl();\n    }\n    get origin() {\n        return this[Internal].url.origin;\n    }\n    get pathname() {\n        return this[Internal].url.pathname;\n    }\n    set pathname(value) {\n        this[Internal].url.pathname = value;\n    }\n    get hash() {\n        return this[Internal].url.hash;\n    }\n    set hash(value) {\n        this[Internal].url.hash = value;\n    }\n    get search() {\n        return this[Internal].url.search;\n    }\n    set search(value) {\n        this[Internal].url.search = value;\n    }\n    get password() {\n        return this[Internal].url.password;\n    }\n    set password(value) {\n        this[Internal].url.password = value;\n    }\n    get username() {\n        return this[Internal].url.username;\n    }\n    set username(value) {\n        this[Internal].url.username = value;\n    }\n    get basePath() {\n        return this[Internal].basePath;\n    }\n    set basePath(value) {\n        this[Internal].basePath = value.startsWith(\"/\") ? value : `/${value}`;\n    }\n    toString() {\n        return this.href;\n    }\n    toJSON() {\n        return this.href;\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            href: this.href,\n            origin: this.origin,\n            protocol: this.protocol,\n            username: this.username,\n            password: this.password,\n            host: this.host,\n            hostname: this.hostname,\n            port: this.port,\n            pathname: this.pathname,\n            search: this.search,\n            searchParams: this.searchParams,\n            hash: this.hash\n        };\n    }\n    clone() {\n        return new NextURL(String(this), this[Internal].options);\n    }\n}\n\n//# sourceMappingURL=next-url.js.map\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/spec-extension/cookies/serialize.js\nconst SAME_SITE = [\n    \"strict\",\n    \"lax\",\n    \"none\"\n];\nfunction parseSameSite(string) {\n    string = string.toLowerCase();\n    return SAME_SITE.includes(string) ? string : undefined;\n}\nfunction compact(t) {\n    const newT = {};\n    for(const key in t){\n        if (t[key]) {\n            newT[key] = t[key];\n        }\n    }\n    return newT;\n}\nfunction serialize(c) {\n    const attrs = [\n        \"path\" in c && c.path && `Path=${c.path}`,\n        \"expires\" in c && c.expires && `Expires=${c.expires.toUTCString()}`,\n        \"maxAge\" in c && c.maxAge && `Max-Age=${c.maxAge}`,\n        \"domain\" in c && c.domain && `Domain=${c.domain}`,\n        \"secure\" in c && c.secure && \"Secure\",\n        \"httpOnly\" in c && c.httpOnly && \"HttpOnly\",\n        \"sameSite\" in c && c.sameSite && `SameSite=${c.sameSite}`, \n    ].filter(Boolean);\n    return `${c.name}=${encodeURIComponent(c.value ?? \"\")}; ${attrs.join(\"; \")}`;\n}\n/**\n * Parse a `Cookie` or `Set-Cookie header value\n */ function parseCookieString(cookie) {\n    const map = new Map();\n    for (const pair of cookie.split(/; */)){\n        if (!pair) continue;\n        const [key, value] = pair.split(\"=\", 2);\n        map.set(key, decodeURIComponent(value ?? \"true\"));\n    }\n    return map;\n}\n/**\n * Parse a `Set-Cookie` header value\n */ function parseSetCookieString(setCookie) {\n    if (!setCookie) {\n        return undefined;\n    }\n    const [[name, value], ...attributes] = parseCookieString(setCookie);\n    const { domain , expires , httponly , maxage , path , samesite , secure  } = Object.fromEntries(attributes.map(([key, v])=>[\n            key.toLowerCase(),\n            v\n        ]));\n    const cookie = {\n        name,\n        value: decodeURIComponent(value),\n        domain,\n        ...expires && {\n            expires: new Date(expires)\n        },\n        ...httponly && {\n            httpOnly: true\n        },\n        ...typeof maxage === \"string\" && {\n            maxAge: Number(maxage)\n        },\n        path,\n        ...samesite && {\n            sameSite: parseSameSite(samesite)\n        },\n        ...secure && {\n            secure: true\n        }\n    };\n    return compact(cookie);\n}\n\n//# sourceMappingURL=serialize.js.map\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/spec-extension/cookies/request-cookies.js\n\n/**\n * A class for manipulating {@link Request} cookies (`Cookie` header).\n */ class RequestCookies {\n    _parsed = new Map();\n    constructor(requestHeaders){\n        this._headers = requestHeaders;\n        const header = requestHeaders.get(\"cookie\");\n        if (header) {\n            const parsed = parseCookieString(header);\n            for (const [name, value] of parsed){\n                this._parsed.set(name, {\n                    name,\n                    value\n                });\n            }\n        }\n    }\n    [Symbol.iterator]() {\n        return this._parsed[Symbol.iterator]();\n    }\n    /**\n   * The amount of cookies received from the client\n   */ get size() {\n        return this._parsed.size;\n    }\n    get(...args) {\n        const name = typeof args[0] === \"string\" ? args[0] : args[0].name;\n        return this._parsed.get(name);\n    }\n    getAll(...args) {\n        var ref;\n        const all = Array.from(this._parsed);\n        if (!args.length) {\n            return all.map(([_, value])=>value);\n        }\n        const name = typeof args[0] === \"string\" ? args[0] : (ref = args[0]) == null ? void 0 : ref.name;\n        return all.filter(([n])=>n === name).map(([_, value])=>value);\n    }\n    has(name) {\n        return this._parsed.has(name);\n    }\n    set(...args) {\n        const [name, value] = args.length === 1 ? [\n            args[0].name,\n            args[0].value\n        ] : args;\n        const map = this._parsed;\n        map.set(name, {\n            name,\n            value\n        });\n        this._headers.set(\"cookie\", Array.from(map).map(([_, v])=>serialize(v)).join(\"; \"));\n        return this;\n    }\n    /**\n   * Delete the cookies matching the passed name or names in the request.\n   */ delete(/** Name or names of the cookies to be deleted  */ names) {\n        const map = this._parsed;\n        const result = !Array.isArray(names) ? map.delete(names) : names.map((name)=>map.delete(name));\n        this._headers.set(\"cookie\", Array.from(map).map(([_, value])=>serialize(value)).join(\"; \"));\n        return result;\n    }\n    /**\n   * Delete all the cookies in the cookies in the request.\n   */ clear() {\n        this.delete(Array.from(this._parsed.keys()));\n        return this;\n    }\n    /**\n   * Format the cookies in the request as a string for logging\n   */ [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return `RequestCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;\n    }\n}\n\n//# sourceMappingURL=request-cookies.js.map\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/spec-extension/cookies/response-cookies.js\n\nfunction replace(bag, headers) {\n    headers.delete(\"set-cookie\");\n    for (const [, value] of bag){\n        const serialized = serialize(value);\n        headers.append(\"set-cookie\", serialized);\n    }\n}\nfunction normalizeCookie(cookie = {\n    name: \"\",\n    value: \"\"\n}) {\n    if (cookie.maxAge) {\n        cookie.expires = new Date(Date.now() + cookie.maxAge * 1000);\n    }\n    if (cookie.path === null || cookie.path === undefined) {\n        cookie.path = \"/\";\n    }\n    return cookie;\n}\n/**\n * A class for manipulating {@link Response} cookies (`Set-Cookie` header).\n * Loose implementation of the experimental [Cookie Store API](https://wicg.github.io/cookie-store/#dictdef-cookie)\n * The main difference is `ResponseCookies` methods do not return a Promise.\n */ class ResponseCookies {\n    _parsed = new Map();\n    constructor(responseHeaders){\n        this._headers = responseHeaders;\n        // @ts-expect-error See https://github.com/whatwg/fetch/issues/973\n        const headers = this._headers.getAll(\"set-cookie\");\n        for (const header of headers){\n            const parsed = parseSetCookieString(header);\n            if (parsed) {\n                this._parsed.set(parsed.name, parsed);\n            }\n        }\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-get CookieStore#get} without the Promise.\n   */ get(...args) {\n        const key = typeof args[0] === \"string\" ? args[0] : args[0].name;\n        return this._parsed.get(key);\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-getAll CookieStore#getAll} without the Promise.\n   */ getAll(...args) {\n        var ref;\n        const all = Array.from(this._parsed.values());\n        if (!args.length) {\n            return all;\n        }\n        const key = typeof args[0] === \"string\" ? args[0] : (ref = args[0]) == null ? void 0 : ref.name;\n        return all.filter((c)=>c.name === key);\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-set CookieStore#set} without the Promise.\n   */ set(...args) {\n        const [name, value, cookie] = args.length === 1 ? [\n            args[0].name,\n            args[0].value,\n            args[0]\n        ] : args;\n        const map = this._parsed;\n        map.set(name, normalizeCookie({\n            name,\n            value,\n            ...cookie\n        }));\n        replace(map, this._headers);\n        return this;\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-delete CookieStore#delete} without the Promise.\n   */ delete(...args) {\n        const name = typeof args[0] === \"string\" ? args[0] : args[0].name;\n        return this.set({\n            name,\n            value: \"\",\n            expires: new Date(0)\n        });\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return `ResponseCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;\n    }\n}\n\n//# sourceMappingURL=response-cookies.js.map\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/spec-extension/cookies/index.js\n\n\n\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/spec-extension/request.js\n\n\n\n\nconst INTERNALS = Symbol(\"internal request\");\nclass NextRequest extends Request {\n    constructor(input, init = {}){\n        const url = typeof input !== \"string\" && \"url\" in input ? input.url : String(input);\n        validateURL(url);\n        super(url, init);\n        this[INTERNALS] = {\n            cookies: new RequestCookies(this.headers),\n            geo: init.geo || {},\n            ip: init.ip,\n            url: new NextURL(url, {\n                headers: toNodeHeaders(this.headers),\n                nextConfig: init.nextConfig\n            })\n        };\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            cookies: this.cookies,\n            geo: this.geo,\n            ip: this.ip,\n            nextUrl: this.nextUrl,\n            url: this.url,\n            // rest of props come from Request\n            bodyUsed: this.bodyUsed,\n            cache: this.cache,\n            credentials: this.credentials,\n            destination: this.destination,\n            headers: Object.fromEntries(this.headers),\n            integrity: this.integrity,\n            keepalive: this.keepalive,\n            method: this.method,\n            mode: this.mode,\n            redirect: this.redirect,\n            referrer: this.referrer,\n            referrerPolicy: this.referrerPolicy,\n            signal: this.signal\n        };\n    }\n    get cookies() {\n        return this[INTERNALS].cookies;\n    }\n    get geo() {\n        return this[INTERNALS].geo;\n    }\n    get ip() {\n        return this[INTERNALS].ip;\n    }\n    get nextUrl() {\n        return this[INTERNALS].url;\n    }\n    /**\n   * @deprecated\n   * `page` has been deprecated in favour of `URLPattern`.\n   * Read more: https://nextjs.org/docs/messages/middleware-request-page\n   */ get page() {\n        throw new RemovedPageError();\n    }\n    /**\n   * @deprecated\n   * `ua` has been removed in favour of \\`userAgent\\` function.\n   * Read more: https://nextjs.org/docs/messages/middleware-parse-user-agent\n   */ get ua() {\n        throw new RemovedUAError();\n    }\n    get url() {\n        return this[INTERNALS].url.toString();\n    }\n}\n\n//# sourceMappingURL=request.js.map\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/spec-extension/response.js\n\n\n\nconst response_INTERNALS = Symbol(\"internal response\");\nconst REDIRECTS = new Set([\n    301,\n    302,\n    303,\n    307,\n    308\n]);\nfunction handleMiddlewareField(init, headers) {\n    var ref;\n    if (init == null ? void 0 : (ref = init.request) == null ? void 0 : ref.headers) {\n        if (!(init.request.headers instanceof Headers)) {\n            throw new Error(\"request.headers must be an instance of Headers\");\n        }\n        const keys = [];\n        for (const [key, value] of init.request.headers){\n            headers.set(\"x-middleware-request-\" + key, value);\n            keys.push(key);\n        }\n        headers.set(\"x-middleware-override-headers\", keys.join(\",\"));\n    }\n}\nclass NextResponse extends Response {\n    constructor(body, init = {}){\n        super(body, init);\n        this[response_INTERNALS] = {\n            cookies: new ResponseCookies(this.headers),\n            url: init.url ? new NextURL(init.url, {\n                headers: toNodeHeaders(this.headers),\n                nextConfig: init.nextConfig\n            }) : undefined\n        };\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            cookies: this.cookies,\n            url: this.url,\n            // rest of props come from Response\n            body: this.body,\n            bodyUsed: this.bodyUsed,\n            headers: Object.fromEntries(this.headers),\n            ok: this.ok,\n            redirected: this.redirected,\n            status: this.status,\n            statusText: this.statusText,\n            type: this.type\n        };\n    }\n    get cookies() {\n        return this[response_INTERNALS].cookies;\n    }\n    static json(body, init) {\n        // @ts-expect-error This is not in lib/dom right now, and we can't augment it.\n        const response = Response.json(body, init);\n        return new NextResponse(response.body, response);\n    }\n    static redirect(url, init) {\n        const status = typeof init === \"number\" ? init : (init == null ? void 0 : init.status) ?? 307;\n        if (!REDIRECTS.has(status)) {\n            throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n        }\n        const initObj = typeof init === \"object\" ? init : {};\n        const headers = new Headers(initObj == null ? void 0 : initObj.headers);\n        headers.set(\"Location\", validateURL(url));\n        return new NextResponse(null, {\n            ...initObj,\n            headers,\n            status\n        });\n    }\n    static rewrite(destination, init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set(\"x-middleware-rewrite\", validateURL(destination));\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n    static next(init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set(\"x-middleware-next\", \"1\");\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n}\n\n//# sourceMappingURL=response.js.map\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/relativize-url.js\n/**\n * Given a URL as a string and a base URL it will make the URL relative\n * if the parsed protocol and host is the same as the one in the base\n * URL. Otherwise it returns the same URL string.\n */ function relativizeURL(url, base) {\n    const baseURL = typeof base === \"string\" ? new URL(base) : base;\n    const relative = new URL(url, base);\n    const origin = `${baseURL.protocol}//${baseURL.host}`;\n    return `${relative.protocol}//${relative.host}` === origin ? relative.toString().replace(origin, \"\") : relative.toString();\n} //# sourceMappingURL=relativize-url.js.map\n\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/internal-utils.js\nconst INTERNAL_QUERY_NAMES = [\n    \"__nextFallback\",\n    \"__nextLocale\",\n    \"__nextDefaultLocale\",\n    \"__nextIsNotFound\",\n    // RSC\n    \"__rsc__\",\n    // Routing\n    \"__next_router_state_tree__\",\n    \"__next_router_prefetch__\", \n];\nconst EXTENDED_INTERNAL_QUERY_NAMES = [\n    \"__nextDataReq\"\n];\nfunction stripInternalQueries(query) {\n    for (const name of INTERNAL_QUERY_NAMES){\n        delete query[name];\n    }\n}\nfunction stripInternalSearchParams(searchParams, extended) {\n    for (const name of INTERNAL_QUERY_NAMES){\n        searchParams.delete(name);\n    }\n    if (extended) {\n        for (const name of EXTENDED_INTERNAL_QUERY_NAMES){\n            searchParams.delete(name);\n        }\n    }\n    return searchParams;\n}\n\n//# sourceMappingURL=internal-utils.js.map\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/shared/lib/router/utils/app-paths.js\n// remove (name) from pathname as it's not considered for routing\nfunction normalizeAppPath(pathname) {\n    return pathname.split(\"/\").reduce((acc, segment, index, segments)=>{\n        // Empty segments are ignored.\n        if (!segment) {\n            return acc;\n        }\n        if (segment.startsWith(\"(\") && segment.endsWith(\")\")) {\n            return acc;\n        }\n        if (segment.startsWith(\"@\")) {\n            return acc;\n        }\n        if (segment === \"page\" && index === segments.length - 1) {\n            return acc;\n        }\n        return acc + `/${segment}`;\n    }, \"\");\n}\nfunction normalizeRscPath(pathname, enabled) {\n    return enabled ? pathname.replace(/\\.rsc($|\\?)/, \"\") : pathname;\n} //# sourceMappingURL=app-paths.js.map\n\n;// CONCATENATED MODULE: ./node_modules/.pnpm/next@13.0.2_qtpcxnaaarbm4ws7ughq6oxfve/node_modules/next/dist/esm/server/web/adapter.js\n\n\n\n\n\n\n\n\n\n\nclass NextRequestHint extends NextRequest {\n    constructor(params){\n        super(params.input, params.init);\n        this.sourcePage = params.page;\n    }\n    get request() {\n        throw new PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n    respondWith() {\n        throw new PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n    waitUntil() {\n        throw new PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n}\nconst FLIGHT_PARAMETERS = [\n    \"__rsc__\",\n    \"__next_router_state_tree__\",\n    \"__next_router_prefetch__\", \n];\nasync function adapter(params) {\n    // TODO-APP: use explicit marker for this\n    const isEdgeRendering = typeof self.__BUILD_MANIFEST !== \"undefined\";\n    params.request.url = normalizeRscPath(params.request.url, true);\n    const requestUrl = new NextURL(params.request.url, {\n        headers: params.request.headers,\n        nextConfig: params.request.nextConfig\n    });\n    // Ensure users only see page requests, never data requests.\n    const buildId = requestUrl.buildId;\n    requestUrl.buildId = \"\";\n    const isDataReq = params.request.headers[\"x-nextjs-data\"];\n    if (isDataReq && requestUrl.pathname === \"/index\") {\n        requestUrl.pathname = \"/\";\n    }\n    const requestHeaders = fromNodeHeaders(params.request.headers);\n    // Parameters should only be stripped for middleware\n    if (!isEdgeRendering) {\n        for (const param of FLIGHT_PARAMETERS){\n            requestHeaders.delete(param);\n        }\n    }\n    // Strip internal query parameters off the request.\n    stripInternalSearchParams(requestUrl.searchParams, true);\n    const request = new NextRequestHint({\n        page: params.page,\n        input: String(requestUrl),\n        init: {\n            body: params.request.body,\n            geo: params.request.geo,\n            headers: requestHeaders,\n            ip: params.request.ip,\n            method: params.request.method,\n            nextConfig: params.request.nextConfig\n        }\n    });\n    /**\n   * This allows to identify the request as a data request. The user doesn't\n   * need to know about this property neither use it. We add it for testing\n   * purposes.\n   */ if (isDataReq) {\n        Object.defineProperty(request, \"__isData\", {\n            enumerable: false,\n            value: true\n        });\n    }\n    const event = new NextFetchEvent({\n        request,\n        page: params.page\n    });\n    let response = await params.handler(request, event);\n    // check if response is a Response object\n    if (response && !(response instanceof Response)) {\n        throw new TypeError(\"Expected an instance of Response to be returned\");\n    }\n    /**\n   * For rewrites we must always include the locale in the final pathname\n   * so we re-create the NextURL forcing it to include it when the it is\n   * an internal rewrite. Also we make sure the outgoing rewrite URL is\n   * a data URL if the request was a data request.\n   */ const rewrite = response == null ? void 0 : response.headers.get(\"x-middleware-rewrite\");\n    if (response && rewrite) {\n        const rewriteUrl = new NextURL(rewrite, {\n            forceLocale: true,\n            headers: params.request.headers,\n            nextConfig: params.request.nextConfig\n        });\n        if (true) {\n            if (rewriteUrl.host === request.nextUrl.host) {\n                rewriteUrl.buildId = buildId || rewriteUrl.buildId;\n                response.headers.set(\"x-middleware-rewrite\", String(rewriteUrl));\n            }\n        }\n        /**\n     * When the request is a data request we must show if there was a rewrite\n     * with an internal header so the client knows which component to load\n     * from the data request.\n     */ if (isDataReq) {\n            response.headers.set(\"x-nextjs-rewrite\", relativizeURL(String(rewriteUrl), String(requestUrl)));\n        }\n    }\n    /**\n   * For redirects we will not include the locale in case when it is the\n   * default and we must also make sure the outgoing URL is a data one if\n   * the incoming request was a data request.\n   */ const redirect = response == null ? void 0 : response.headers.get(\"Location\");\n    if (response && redirect) {\n        const redirectURL = new NextURL(redirect, {\n            forceLocale: false,\n            headers: params.request.headers,\n            nextConfig: params.request.nextConfig\n        });\n        /**\n     * Responses created from redirects have immutable headers so we have\n     * to clone the response to be able to modify it.\n     */ response = new Response(response.body, response);\n        if (true) {\n            if (redirectURL.host === request.nextUrl.host) {\n                redirectURL.buildId = buildId || redirectURL.buildId;\n                response.headers.set(\"Location\", String(redirectURL));\n            }\n        }\n        /**\n     * When the request is a data request we can't use the location header as\n     * it may end up with CORS error. Instead we map to an internal header so\n     * the client knows the destination.\n     */ if (isDataReq) {\n            response.headers.delete(\"Location\");\n            response.headers.set(\"x-nextjs-redirect\", relativizeURL(String(redirectURL), String(requestUrl)));\n        }\n    }\n    return {\n        response: response || NextResponse.next(),\n        waitUntil: Promise.all(event[waitUntilSymbol])\n    };\n}\nfunction blockUnallowedResponse(promise) {\n    if (false) {}\n    return promise.then((result)=>{\n        var ref;\n        if ((ref = result.response) == null ? void 0 : ref.body) {\n            console.error(new Error(`A middleware can not alter response's body. Learn more: https://nextjs.org/docs/messages/returning-response-body-in-middleware`));\n            return {\n                ...result,\n                response: new Response(\"Internal Server Error\", {\n                    status: 500,\n                    statusText: \"Internal Server Error\"\n                })\n            };\n        }\n        return result;\n    });\n}\nfunction getUnsupportedModuleErrorMessage(module) {\n    // warning: if you change these messages, you must adjust how react-dev-overlay's middleware detects modules not found\n    return `The edge runtime does not support Node.js '${module}' module.\nLearn More: https://nextjs.org/docs/messages/node-module-in-edge-runtime`;\n}\nfunction __import_unsupported(moduleName) {\n    const proxy = new Proxy(function() {}, {\n        get (_obj, prop) {\n            if (prop === \"then\") {\n                return {};\n            }\n            throw new Error(getUnsupportedModuleErrorMessage(moduleName));\n        },\n        construct () {\n            throw new Error(getUnsupportedModuleErrorMessage(moduleName));\n        },\n        apply (_target, _this, args) {\n            if (typeof args[0] === \"function\") {\n                return args[0](proxy);\n            }\n            throw new Error(getUnsupportedModuleErrorMessage(moduleName));\n        }\n    });\n    return new Proxy({}, {\n        get: ()=>proxy\n    });\n}\nfunction enhanceGlobals() {\n    // The condition is true when the \"process\" module is provided\n    if (process !== __webpack_require__.g.process) {\n        // prefer local process but global.process has correct \"env\"\n        process.env = __webpack_require__.g.process.env;\n        __webpack_require__.g.process = process;\n    }\n    // to allow building code that import but does not use node.js modules,\n    // webpack will expect this function to exist in global scope\n    Object.defineProperty(globalThis, \"__import_unsupported\", {\n        value: __import_unsupported,\n        enumerable: false,\n        configurable: false\n    });\n}\n\n//# sourceMappingURL=adapter.js.map\n\n/***/ })\n\n},\n/******/ __webpack_require__ => { // webpackRuntimeModules\n/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))\n/******/ var __webpack_exports__ = (__webpack_exec__(898));\n/******/ (_ENTRIES = typeof _ENTRIES === \"undefined\" ? {} : _ENTRIES)[\"middleware_pages/api/top-tracks\"] = __webpack_exports__;\n/******/ }\n]);"],"names":["self","push","__unused_webpack_module","__webpack_exports__","__webpack_require__","r","d","__WEBPACK_DEFAULT_EXPORT__","next_dist_esm_server_web_adapter__WEBPACK_IMPORTED_MODULE_0__","gL","mod","handler","middleware","default","opts","VL","page","getTopTracks","getNowPlaying","client_id","process","env","SPOTIFY_CLIENT_ID","client_secret","SPOTIFY_CLIENT_SECRET","refresh_token","SPOTIFY_REFRESH_TOKEN","basic","btoa","getAccessToken","response","fetch","method","headers","Authorization","body","URLSearchParams","grant_type","json","access_token","config","lib_spotify__WEBPACK_IMPORTED_MODULE_0__","runtime","req","V","items","tracks","slice","map","artist","track","artists","_artist","name","join","songUrl","external_urls","spotify","title","Response","JSON","stringify","status","adapter","enhanceGlobals","PageSignatureError","Error","constructor","RemovedPageError","RemovedUAError","toNodeHeaders","result","key","value","entries","toLowerCase","splitCookiesString","cookiesString","start","ch","lastComma","nextStart","cookiesSeparatorFound","cookiesStrings","pos","skipWhitespace","length","test","charAt","substring","validateURL","url","String","URL","error","cause","responseSymbol","Symbol","passThroughSymbol","waitUntilSymbol","FetchEvent","_request","respondWith","Promise","resolve","passThroughOnException","waitUntil","promise","NextFetchEvent","params","request","sourcePage","removeTrailingSlash","route","replace","parsePath","path","hashIndex","indexOf","queryIndex","hasQuery","pathname","query","undefined","hash","addPathPrefix","prefix","startsWith","addPathSuffix","suffix","pathHasPrefix","REGEX_LOCALHOST_HOSTNAME","parseURL","base","Internal","NextURL","input","baseOrOpts","options","basePath","analyzeUrl","ref","ref1","ref2","ref3","ref4","parsed","pathnameInfo","getNextPathnameInfo","_nextConfig","i18n","trailingSlash","nextConfig","info","endsWith","removePathPrefix","withoutPrefix","parseData","paths","split","buildId","pathLocale","normalizeLocalePath","locales","detectedLocale","pathnameParts","some","locale","splice","domainLocale","detectDomainLocale","domainItems","hostname","domainItem","item","domainHostname","domain","defaultLocale","domains","Array","isArray","host","formatPathname","ignorePrefix","forceLocale","formatSearch","search","ref5","includes","searchParams","port","protocol","href","origin","password","username","toString","toJSON","for","clone","SAME_SITE","serialize","c","attrs","expires","toUTCString","maxAge","secure","httpOnly","sameSite","filter","Boolean","encodeURIComponent","parseCookieString","cookie","Map","pair","set","decodeURIComponent","RequestCookies","_parsed","requestHeaders","_headers","header","get","iterator","size","args","getAll","all","from","_","n","has","v","delete","names","clear","keys","Object","fromEntries","ResponseCookies","responseHeaders","parseSetCookieString","setCookie","string","attributes","httponly","maxage","samesite","Date","Number","compact","t","newT","values","normalizeCookie","now","bag","serialized","append","INTERNALS","NextRequest","Request","init","cookies","geo","ip","nextUrl","bodyUsed","cache","credentials","destination","integrity","keepalive","mode","redirect","referrer","referrerPolicy","signal","ua","response_INTERNALS","REDIRECTS","Set","handleMiddlewareField","Headers","NextResponse","ok","redirected","statusText","type","initObj","rewrite","next","relativizeURL","baseURL","relative","INTERNAL_QUERY_NAMES","EXTENDED_INTERNAL_QUERY_NAMES","NextRequestHint","FLIGHT_PARAMETERS","isEdgeRendering","__BUILD_MANIFEST","requestUrl","isDataReq","fromNodeHeaders","object","param","stripInternalSearchParams","extended","defineProperty","enumerable","event","rewriteUrl","redirectURL","getUnsupportedModuleErrorMessage","module","__import_unsupported","moduleName","proxy","Proxy","_obj","prop","construct","apply","_target","_this","g","globalThis","configurable","s","_ENTRIES"],"sourceRoot":""}